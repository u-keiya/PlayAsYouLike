@startuml
' ==========================================================
' Core Domain Class Diagram — Gameplay Core
' PlayAsYouLike Web Rhythm Game
' ==========================================================
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' ------------ Legend -------------------------------------------------
'  <<Entity>>        : 永続または一時データを保持するドメインオブジェクト
'  <<ValueObject>>   : 振る舞いを持たず値で同値性を判定
'  <<Service>>       : ステートレスなドメインロジック
'  <<Repository>>    : 永続化インタフェース
'  USDM Tag          : 参照要件 ( など)
' ---------------------------------------------------------------------

namespace GameplayCore {

  ' ====== Entities ===================================================
  class GameSession <<Entity>>  {
    +id : UUID
    +track : Track
    +beatmap : Beatmap
    +seed : RandomSeed
    +status : SessionStatus
    +start() : void
    +pause() : void
    +resume() : void
    +quit() : void
  }

  class Track <<Entity>>  {
    +url : Url
    +title : string
    +durationSec : int
    +trimmed : bool
  }

  class Beatmap <<Entity>>  {
    +notes : Note[*]
    +bpm : BPM
    +energyEnvelope : EnergyEnvelope
    +beatTimeline : BeatTimeline
    +spectralCentroidSeq : SpectralCentroidSeq
    +keyProgression : KeyProgression
    +segments : Segments
    +createdAt : DateTime
  }

  class Note <<ValueObject>>  {
    +timestamp : ms
    +lane : int
  }

  class RandomSeed <<ValueObject>>  {
    +value : int
  }

  class HitResult <<ValueObject>>  {
    +noteId : int
    +judgement : Judgement
    +offsetMs : int
  }

  enum SessionStatus {
    READY
    RUNNING
    PAUSED
    ENDED
  }

  enum Judgement {
    PERFECT
    GOOD
    MISS
  }

  ' ====== Services ===================================================
  class BeatmapGenerator <<Service>>  {
    +generate(track : Track, seed : RandomSeed) : Beatmap
  }

  class HitJudge <<Service>>  {
    +judge(input : PlayerInput, note : Note) : HitResult
  }

  class PauseService <<Service>>  {
    +pause(session : GameSession) : void
    +resume(session : GameSession) : void
  }

  ' ====== Repositories ===============================================
  class SessionRepository <<Repository>>  {
    +save(session : GameSession) : void
    +findById(id : UUID) : GameSession?
  }

  class SeedRepository <<Repository>>  {
    +saveSeed(key : Url, seed : RandomSeed) : void
    +getSeed(key : Url) : RandomSeed?
  }

  ' ====== Value Objects ==============================================
  class Url <<ValueObject>> {
    +value : string
    +isValid() : bool
  }

  ' ----- Analysis Result Value Objects -----
  class EnergyEnvelope <<ValueObject>> {
    +values : float[*]
  }

  class BeatTimeline <<ValueObject>> {
    +beatsMs : int[*]
  }

  class SpectralCentroidSeq <<ValueObject>> {
    +values : float[*]
  }

  class KeyProgression <<ValueObject>> {
    +keys : string[*]
  }

  class Segments <<ValueObject>> {
    +labels : string[*]
    +startsSec : float[*]
  }

  class BPM <<ValueObject>>  {
    +value : int
  }

  class PlayerInput <<ValueObject>> {
    +timestamp : ms
    +key : string
  }

  ' ====== Relationships ==============================================
  GameSession --> "1" Track

  ' ====== Infrastructure/Adapter Layer (#US-001, #US-002) =============
  class AudioAnalysisAdapter <<Service>> {
    +analyse(url : Url) : BPM
    +timeoutMs : int
    +onTimeout() : void
    ' Audio MS へのgRPC呼び出し。失敗時はWASM fallbackを返す
  }

  class RedisSessionRepository <<Repository>> {
    +save(session : GameSession) : void
    +findById(id : UUID) : GameSession?
    +delete(id : UUID) : void
    +ttlSec : int
    +serialize(session : GameSession) : bytes
    +deserialize(data : bytes) : GameSession
    ' TTL=900秒, MessagePackシリアライズ
  }

  ' ====== Session End/QUIT (#US-001, #US-004) =========================
  GameSession : +end() : void
  ' セッション終了・スコア確定・一時データ削除

  ' ====== Relationships ==============================================
  GameSession --> "1" Track
  GameSession ..> RedisSessionRepository : 永続/削除
  BeatmapGenerator ..> AudioAnalysisAdapter : BPM解析
  GameSession --> "1" Beatmap
  GameSession --> "*" HitResult
  GameSession --> "1" RandomSeed

  Beatmap "1" --> "*" Note
  Beatmap --> EnergyEnvelope
  Beatmap --> BeatTimeline
  Beatmap --> SpectralCentroidSeq
  Beatmap --> KeyProgression
  Beatmap --> Segments

  BeatmapGenerator ..> Track : uses
  BeatmapGenerator ..> RandomSeed
  BeatmapGenerator --> Beatmap

  HitJudge ..> PlayerInput
  HitJudge ..> Note
  HitJudge --> HitResult

  PauseService ..> GameSession

  SessionRepository ..> GameSession
  SeedRepository ..> RandomSeed

  ' ====== Retry Handler (#NF-01) ==========================================
  class RetryHandler <<Service>> {
    +maxAttempts : int
    +backoffMs : int
    +execute(fn) : <T>
  }
  VisualEffectEngine ..> RetryHandler : uses
  ' 汎用リトライ・フェイルオーバー制御 (#NF-01)

}

@enduml