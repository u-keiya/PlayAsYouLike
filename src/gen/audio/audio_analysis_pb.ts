// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.ts"
// @generated from file audio_analysis.proto (package playasul.audio.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum playasul.audio.v1.BeatPosition
 */
export enum BeatPosition {
  /**
   * @generated from enum value: BEAT_POSITION_UNSPECIFIED = 0;
   */
  BEAT_POSITION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ON_BEAT = 1;
   */
  ON_BEAT = 1,

  /**
   * @generated from enum value: OFF_BEAT = 2;
   */
  OFF_BEAT = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BeatPosition)
proto3.util.setEnumType(BeatPosition, "playasul.audio.v1.BeatPosition", [
  { no: 0, name: "BEAT_POSITION_UNSPECIFIED" },
  { no: 1, name: "ON_BEAT" },
  { no: 2, name: "OFF_BEAT" },
]);

/**
 * Audio analysis contract for US-005 Dynamic Visual FX.
 *
 * @generated from message playasul.audio.v1.AnalyzeTrackRequest
 */
export class AnalyzeTrackRequest extends Message<AnalyzeTrackRequest> {
  /**
   * Remote audio resource for analysis (e.g., CDN URL).
   *
   * @generated from field: string audio_url = 1;
   */
  audioUrl = "";

  /**
   * Optional identifier used for downstream traceability.
   *
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  constructor(data?: PartialMessage<AnalyzeTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "playasul.audio.v1.AnalyzeTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audio_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalyzeTrackRequest {
    return new AnalyzeTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalyzeTrackRequest {
    return new AnalyzeTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalyzeTrackRequest {
    return new AnalyzeTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyzeTrackRequest | PlainMessage<AnalyzeTrackRequest> | undefined,
    b: AnalyzeTrackRequest | PlainMessage<AnalyzeTrackRequest> | undefined,
  ): boolean {
    return proto3.util.equals(AnalyzeTrackRequest, a, b);
  }
}

/**
 * @generated from message playasul.audio.v1.AnalyzeTrackResponse
 */
export class AnalyzeTrackResponse extends Message<AnalyzeTrackResponse> {
  /**
   * Summary statistics extracted from the audio track.
   *
   * @generated from field: playasul.audio.v1.AnalysisSummary summary = 1;
   */
  summary?: AnalysisSummary;

  /**
   * Structural breakdown of the track (intro, verse, chorus, etc.).
   *
   * @generated from field: repeated playasul.audio.v1.SectionBreakdown sections = 2;
   */
  sections: SectionBreakdown[] = [];

  constructor(data?: PartialMessage<AnalyzeTrackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "playasul.audio.v1.AnalyzeTrackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "message", T: AnalysisSummary },
    {
      no: 2,
      name: "sections",
      kind: "message",
      T: SectionBreakdown,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalyzeTrackResponse {
    return new AnalyzeTrackResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalyzeTrackResponse {
    return new AnalyzeTrackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalyzeTrackResponse {
    return new AnalyzeTrackResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyzeTrackResponse | PlainMessage<AnalyzeTrackResponse> | undefined,
    b: AnalyzeTrackResponse | PlainMessage<AnalyzeTrackResponse> | undefined,
  ): boolean {
    return proto3.util.equals(AnalyzeTrackResponse, a, b);
  }
}

/**
 * @generated from message playasul.audio.v1.AnalysisSummary
 */
export class AnalysisSummary extends Message<AnalysisSummary> {
  /**
   * Estimated tempo in beats per minute.
   *
   * @generated from field: double bpm = 1;
   */
  bpm = 0;

  /**
   * Root-mean-square energy level (0-1 normalized).
   *
   * @generated from field: double energy = 2;
   */
  energy = 0;

  /**
   * Current beat position classification (US-005 beat mapping).
   *
   * @generated from field: playasul.audio.v1.BeatPosition beat_position = 3;
   */
  beatPosition = BeatPosition.BEAT_POSITION_UNSPECIFIED;

  /**
   * Weighted spectral centroid in Hz.
   *
   * @generated from field: double spectral_centroid = 4;
   */
  spectralCentroid = 0;

  /**
   * Key detection results with confidence.
   *
   * @generated from field: playasul.audio.v1.KeyEstimate key = 5;
   */
  key?: KeyEstimate;

  constructor(data?: PartialMessage<AnalysisSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "playasul.audio.v1.AnalysisSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bpm", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "energy", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    {
      no: 3,
      name: "beat_position",
      kind: "enum",
      T: proto3.getEnumType(BeatPosition),
    },
    {
      no: 4,
      name: "spectral_centroid",
      kind: "scalar",
      T: 1 /* ScalarType.DOUBLE */,
    },
    { no: 5, name: "key", kind: "message", T: KeyEstimate },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AnalysisSummary {
    return new AnalysisSummary().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AnalysisSummary {
    return new AnalysisSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AnalysisSummary {
    return new AnalysisSummary().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalysisSummary | PlainMessage<AnalysisSummary> | undefined,
    b: AnalysisSummary | PlainMessage<AnalysisSummary> | undefined,
  ): boolean {
    return proto3.util.equals(AnalysisSummary, a, b);
  }
}

/**
 * @generated from message playasul.audio.v1.KeyEstimate
 */
export class KeyEstimate extends Message<KeyEstimate> {
  /**
   * Musical key tonic representation (e.g., "A", "C#").
   *
   * @generated from field: string tonic = 1;
   */
  tonic = "";

  /**
   * Mode descriptor (e.g., "major", "minor", "dorian").
   *
   * @generated from field: string mode = 2;
   */
  mode = "";

  /**
   * Confidence score between 0.0 and 1.0.
   *
   * @generated from field: double confidence = 3;
   */
  confidence = 0;

  /**
   * Optional chord progression labels aligned to detected segments.
   *
   * @generated from field: repeated string chord_progression = 4;
   */
  chordProgression: string[] = [];

  constructor(data?: PartialMessage<KeyEstimate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "playasul.audio.v1.KeyEstimate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tonic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "confidence", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    {
      no: 4,
      name: "chord_progression",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): KeyEstimate {
    return new KeyEstimate().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): KeyEstimate {
    return new KeyEstimate().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): KeyEstimate {
    return new KeyEstimate().fromJsonString(jsonString, options);
  }

  static equals(
    a: KeyEstimate | PlainMessage<KeyEstimate> | undefined,
    b: KeyEstimate | PlainMessage<KeyEstimate> | undefined,
  ): boolean {
    return proto3.util.equals(KeyEstimate, a, b);
  }
}

/**
 * @generated from message playasul.audio.v1.SectionBreakdown
 */
export class SectionBreakdown extends Message<SectionBreakdown> {
  /**
   * Label describing the musical segment (intro, verse, chorus, etc.).
   *
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * Start timestamp in seconds from beginning of the track.
   *
   * @generated from field: double start_sec = 2;
   */
  startSec = 0;

  /**
   * End timestamp in seconds from beginning of the track.
   *
   * @generated from field: double end_sec = 3;
   */
  endSec = 0;

  /**
   * Average energy for this section (0-1 normalized).
   *
   * @generated from field: double average_energy = 4;
   */
  averageEnergy = 0;

  constructor(data?: PartialMessage<SectionBreakdown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "playasul.audio.v1.SectionBreakdown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_sec", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "end_sec", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    {
      no: 4,
      name: "average_energy",
      kind: "scalar",
      T: 1 /* ScalarType.DOUBLE */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SectionBreakdown {
    return new SectionBreakdown().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SectionBreakdown {
    return new SectionBreakdown().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SectionBreakdown {
    return new SectionBreakdown().fromJsonString(jsonString, options);
  }

  static equals(
    a: SectionBreakdown | PlainMessage<SectionBreakdown> | undefined,
    b: SectionBreakdown | PlainMessage<SectionBreakdown> | undefined,
  ): boolean {
    return proto3.util.equals(SectionBreakdown, a, b);
  }
}
